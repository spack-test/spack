stages: [ "generate", "build", "publish" ]

default:
  image: { "name": "ghcr.io/spack/e4s-ubuntu-18.04:v2021-10-18", "entrypoint": [""] }

########################################
# Job templates
########################################

.pr:
  only:
  - /^pr[\d]+_.*$/
  - /^github\/pr[\d]+_.*$/
  variables:
    SPACK_BUILDCACHE_DESTINATION: "s3://spack-binaries-prs/${CI_COMMIT_REF_NAME}/${SPACK_CI_STACK_NAME}"
    SPACK_PIPELINE_TYPE: "spack_pull_request"
    SPACK_PRUNE_UNTOUCHED: "True"

.protected-refs:
  only:
  - /^develop$/
  - /^releases\/v.*/
  - /^v.*/
  - /^github\/develop$/

.protected:
  extends: [ ".protected-refs" ]
  variables:
    SPACK_BUILDCACHE_DESTINATION: "s3://spack-binaries/${CI_COMMIT_REF_NAME}/${SPACK_CI_STACK_NAME}"
    SPACK_COPY_BUILDCACHE: "s3://spack-binaries/${CI_COMMIT_REF_NAME}"
    SPACK_PIPELINE_TYPE: "spack_protected_branch"

.generate:
  stage: generate
  script:
    - uname -a || true
    - grep -E 'vendor|model name' /proc/cpuinfo 2>/dev/null | sort -u || head -n10 /proc/cpuinfo 2>/dev/null || true
    - nproc || true
    - . "./share/spack/setup-env.sh"
    - spack --version
    - cd share/spack/gitlab/cloud_pipelines/stacks/${SPACK_CI_STACK_NAME}
    - spack env activate --without-view .
    - spack ci generate --check-index-only
      --buildcache-destination "${SPACK_BUILDCACHE_DESTINATION}"
      --artifacts-root "${CI_PROJECT_DIR}/jobs_scratch_dir"
      --output-file "${CI_PROJECT_DIR}/jobs_scratch_dir/cloud-ci-pipeline.yml"
  after_script:
    - cat /proc/loadavg || true
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/jobs_scratch_dir"
  tags: ["spack", "aws", "public", "medium", "x86_64"]
  variables:
    KUBERNETES_CPU_REQUEST: 4000m
    KUBERNETES_MEMORY_REQUEST: 8G
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

.generate-aarch64:
  extends: [ ".generate" ]
  tags: ["spack", "aws", "public", "medium", "aarch64"]

.pr-generate:
  extends: [ ".pr", ".generate" ]

.pr-generate-aarch64:
  extends: [ ".pr", ".generate-aarch64" ]

.protected-generate:
  extends: [ ".protected", ".generate" ]

.protected-generate-aarch64:
  extends: [ ".protected", ".generate-aarch64" ]

.build:
  stage: build

.pr-build:
  extends: [ ".pr", ".build" ]
  variables:
    AWS_ACCESS_KEY_ID: ${PR_MIRRORS_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${PR_MIRRORS_AWS_SECRET_ACCESS_KEY}

.protected-build:
  extends: [ ".protected", ".build" ]
  variables:
    AWS_ACCESS_KEY_ID: ${PROTECTED_MIRRORS_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${PROTECTED_MIRRORS_AWS_SECRET_ACCESS_KEY}

protected-publish:
  stage: publish
  extends: [ ".protected" ]
  image: "ghcr.io/spack/python-aws-bash:0.0.1"
  tags: ["spack", "public", "medium", "aws", "x86_64"]
  retry:
    max: 2
    when: ["runner_system_failure", "stuck_or_timeout_failure"]
  variables:
    AWS_ACCESS_KEY_ID: ${PROTECTED_MIRRORS_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${PROTECTED_MIRRORS_AWS_SECRET_ACCESS_KEY}
  script:
    - . "./share/spack/setup-env.sh"
    - spack --version
    - export COPY_SPECS_DIR=${CI_PROJECT_DIR}/jobs_scratch_dir/specs_to_copy
    - spack buildcache sync --manifest-glob "${COPY_SPECS_DIR}/*.json"
    - spack buildcache update-index --mirror-url ${SPACK_COPY_BUILDCACHE}

########################################
# TEMPLATE FOR ADDING ANOTHER PIPELINE
########################################
#
# First add a new spack.yml defining the pipeline to run in
# share/spack/gitlab/cloud_pipelines/stacks/my-super-cool-stack/spack.yaml
#
# Then add the following entries at the bottom of this file:
#
########################################
# My Super Cool Pipeline
########################################
# .my-super-cool-stack:
#   variables:
#     SPACK_CI_STACK_NAME: my-super-cool-stack
#
# my-super-cool-stack-pr-generate:
#   extends: [ ".my-super-cool-stack", ".pr-generate"]
#
# my-super-cool-stack-protected-generate:
#   extends: [ ".my-super-cool-stack", ".protected-generate"]
#
# my-super-cool-stack-pr-build:
#   extends: [ ".my-super-cool-stack", ".pr-build" ]
#   trigger:
#     include:
#       - artifact: jobs_scratch_dir/cloud-ci-pipeline.yml
#         job: my-super-cool-stack-pr-generate
#     strategy: depend
#
# my-super-cool-stack-protected-build:
#   extends: [ ".my-super-cool-stack", ".protected-build" ]
#   trigger:
#     include:
#       - artifact: jobs_scratch_dir/cloud-ci-pipeline.yml
#         job: my-super-cool-stack-protected-generate
#     strategy: depend

#########################################
# Build tests for different build-systems
#########################################
.build_systems:
  variables:
    SPACK_CI_STACK_NAME: build_systems

build_systems-pr-generate:
  extends: [ ".build_systems", ".pr-generate"]

build_systems-protected-generate:
  extends: [ ".build_systems", ".protected-generate"]

build_systems-pr-build:
  extends: [ ".build_systems", ".pr-build" ]
  trigger:
    include:
      - artifact: jobs_scratch_dir/cloud-ci-pipeline.yml
        job: build_systems-pr-generate
    strategy: depend
  needs:
    - artifacts: True
      job: build_systems-pr-generate

build_systems-protected-build:
  extends: [ ".build_systems", ".protected-build" ]
  trigger:
    include:
      - artifact: jobs_scratch_dir/cloud-ci-pipeline.yml
        job: build_systems-protected-generate
    strategy: depend
  needs:
    - artifacts: True
      job: build_systems-protected-generate

